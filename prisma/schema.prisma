generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String 
  lastName  String
  middleName String?
  dob        DateTime?
  gender     String
  email      String   @unique
  password   String
  role       UserRole @default(PATIENT)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?


  idNumber             String?
  hospitalId           Int?
  isApproved           Boolean @default(true)
  verificationDocument String?
  profilePicture String?
  phoneNumber          String?
  isActive Boolean @default(true)

  patient Patient?
  doctor  Doctor?

  managedHospitals HospitalAdmin[]

  // Relationship with Address
  address Address?
}

model Address {
  id        Int      @id @default(autoincrement())
  street    String?
  city      String
  state     String?
  postalCode       String?
  country   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId   Int?   @unique
  doctorId Int?   @unique
  hospitalId Int? @unique

  user   User?   @relation(fields: [userId], references: [id])
  doctor Doctor? @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  hospital Hospital? @relation(fields: [hospitalId], references: [id])
}

model Patient {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  appointments Appointment[]
}

model Hospital {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  address   Address?
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  website                    String?
  description                String?
  emergencyContact           String?
  registrationNumber         String   @unique
  imageUrl                   String?
  openingHours               String?
  services                   String[]
  departments                String[]
  bedCapacity                Int?
  availableBeds              Int?
  acceptedInsuranceProviders String[]
  rating                     Float?   @default(0.0)
  totalReviews               Int?     @default(0)
  operatingStatus            OperatingStatus @default(Open)
  verifiedBy                 String?
  facilities                 String[]
  queueSystem                Boolean  @default(true)
  telemedicine               Boolean  @default(false)

  doctors      Doctor[]
  appointments Appointment[]

  hospitalAdmins HospitalAdmin[]
}

model Doctor {
  id         Int       @id @default(autoincrement())
  userId     Int       @unique
  user       User      @relation(fields: [userId], references: [id])
  speciality  String
  hospitalId Int
  hospital   Hospital @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  address Address? 
  available Boolean @default(true)

  appointments Appointment[]

  licenseNumber     String @unique 
  yearsOfExperience Int? 
  isVerified        Boolean @default(false) 
  phoneNumber       String 

  // Work hours
  availableFrom     String? 
  availableTo       String? 
}


model Appointment {
  id         Int      @id @default(autoincrement())
  patientId  Int
  doctorId   Int
  hospitalId Int
  description String?
  status     AppointmentStatus @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  date DateTime
  startTime DateTime?
  endTime    DateTime?

  patient  Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor   Doctor   @relation(fields: [doctorId], references: [id],onDelete: Cascade)
  hospital Hospital @relation(fields: [hospitalId], references: [id],onDelete: Cascade)
  
}



model HospitalAdmin {
  id         Int      @id @default(autoincrement())
  userId     Int
  hospitalId Int
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id])
  hospital Hospital @relation(fields: [hospitalId], references: [id])

  @@unique([userId, hospitalId]) 
}

enum UserRole {
  PATIENT
  DOCTOR
  ADMIN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED

}

enum OperatingStatus{
  Closed
  Open
}
   

